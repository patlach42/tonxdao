services:
  db:
    image: postgres:12
    restart: always
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
  redis:
    image: redis:7
    restart: always
    volumes:
      - redis-data:/data

#  adminer:
#    image: adminer
#    restart: always
#    networks:
#      - traefik-public
#      - default
#    depends_on:
#      - db
#    environment:
#      - ADMINER_DESIGN=pepa-linha-dark
#    labels:
#      - traefik.enable=true
#      - traefik.docker.network=traefik-public
#      - traefik.constraint-label=traefik-public
#      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.rule=Host(`adminer.${DOMAIN?Variable not set}`)
#      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.entrypoints=http
#      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.middlewares=https-redirect
#      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.rule=Host(`adminer.${DOMAIN?Variable not set}`)
#      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.entrypoints=https
#      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.tls=true
#      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.tls.certresolver=le
#      - traefik.http.services.${STACK_NAME?Variable not set}-adminer.loadbalancer.server.port=8080

  consumer:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    command: huey_consumer.py tasks.huey
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - USERS_OPEN_REGISTRATION=${USERS_OPEN_REGISTRATION}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}

    build:
      context: ./backend
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    platform: linux/amd64 # Patch for M1 Mac

  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - USERS_OPEN_REGISTRATION=${USERS_OPEN_REGISTRATION}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}

    build:
      context: ./backend
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    platform: linux/amd64 # Patch for M1 Mac
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80

      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=Host(`${DOMAIN?Variable not set}`) && PathPrefix(`/api`, `/docs`, `/redoc`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.entrypoints=http

      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.rule=Host(`${DOMAIN?Variable not set}`) && PathPrefix(`/api`, `/docs`, `/redoc`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls.certresolver=le
#
#      # Define Traefik Middleware to handle domain with and without "www" to redirect to only one
#      - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.regex=^http(s)?://www.(${DOMAIN?Variable not set})/(.*)
#      # Redirect a domain with www to non-www
#      - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.replacement=http$${1}://${DOMAIN?Variable not set}/$${3}

      # Enable www redirection for HTTP and HTTPS
#      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.middlewares=https-redirect,${STACK_NAME?Variable not set}-www-redirect
#      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.middlewares=${STACK_NAME?Variable not set}-www-redirect

  telegram-bot:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - USERS_OPEN_REGISTRATION=${USERS_OPEN_REGISTRATION}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}
      - APP_TELEGRAM_BOT_TOKEN=${APP_TELEGRAM_BOT_TOKEN?Variable not set}
      - APP_TELEGRAM_BOT_NAME=${APP_TELEGRAM_BOT_NAME?Variable not set}
    command: "python -m app.tg_bot"
    build:
      context: ./backend
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    platform: linux/amd64 # Patch for M1 Mac

  frontend:
    image: '${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    build:
      context: ./frontend
      args:
        - VITE_API_URL=https://${DOMAIN?Variable not set}
        - NODE_ENV=production
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80


      # HTTP rule for the /admin path
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-admin-http.rule=Host(`${DOMAIN?Variable not set}`) && PathPrefix(`/admin`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-admin-http.entrypoints=http

      # HTTPS rule for the /admin path
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-admin-https.rule=Host(`${DOMAIN?Variable not set}`) && PathPrefix(`/admin`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-admin-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-admin-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-admin-https.tls.certresolver=le

      # Enable www redirection for HTTP and HTTPS
#      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.middlewares=${STACK_NAME?Variable not set}-www-redirect
#      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.middlewares=https-redirect,${STACK_NAME?Variable not set}-www-redirect

  centrifugo:
    image: centrifugo/centrifugo:v5
    networks:
      - traefik-public
      - default
    volumes:
      - ./backend/centrifugo.json:/centrifugo/config.json
    command: centrifugo -c config.json
    environment:
      - CENTRIFUGO_ALLOWED_ORIGINS=${CENTRIFUGO_ALLOWED_ORIGINS?Variable not set}
      - CENTRIFUGO_TOKEN_HMAC_SECRET_KEY=${CENTRIFUGO_TOKEN_HMAC_SECRET_KEY?Variable not set}
      - CENTRIFUGO_ADMIN_PASSWORD=${CENTRIFUGO_ADMIN_PASSWORD?Variable not set}
      - CENTRIFUGO_ADMIN_SECRET=${CENTRIFUGO_ADMIN_SECRET?Variable not set}
      - CENTRIFUGO_API_KEY=${CENTRIFUGO_API_KEY?Variable not set}
      - CENTRIFUGO_PROXY_RPC_ENDPOINT=http://backend:80/api/v1/rpc
      - CENTRIFUGO_PROXY_RPC_TIMEOUT=10s
      - CENTRIFUGO_PROXY_PUBLISH_ENDPOINT=http://backend:80/api/v1/pub
      - CENTRIFUGO_PROXY_PUBLISH_TIMEOUT=10s
      - CENTRIFUGO_ALLOW_PUBLISH_FOR_CLIENT=true
      - CENTRIFUGO_ALLOW_SUBSCRIBE_FOR_CLIENT=true
      - CENTRIFUGO_PRESENCE=true
      - CENTRIFUGO_PROXY_PUBLISH=true
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.${STACK_NAME?Variable not set}-centrifugo.loadbalancer.server.port=8000

      - traefik.http.routers.${STACK_NAME?Variable not set}-centrifugo-http.rule=Host(`${DOMAIN?Variable not set}`) && PathPrefix(`/ws`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-centrifugo-http.entrypoints=http

      - traefik.http.routers.${STACK_NAME?Variable not set}-centrifugo-https.rule=Host(`${DOMAIN?Variable not set}`) && PathPrefix(`/ws`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-centrifugo-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-centrifugo-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-centrifugo-https.tls.certresolver=le

  telegram-app:
    image: '${DOCKER_IMAGE_WEBAPP?Variable not set}:${TAG-latest}'
    restart: always
    environment:
      - VITE_API_URL=https://${DOMAIN?Variable not set}
      - NODE_ENV=production
    networks:
      - traefik-public
      - default
    build:
      context: ./telegramApp
      args:
        - VITE_API_URL=https://${DOMAIN?Variable not set}
        - NODE_ENV=production
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.${STACK_NAME?Variable not set}-telegram-app.loadbalancer.server.port=80

      - traefik.http.routers.${STACK_NAME?Variable not set}-telegram-app-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-telegram-app-http.entrypoints=http

      - traefik.http.routers.${STACK_NAME?Variable not set}-telegram-app-https.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-telegram-app-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-telegram-app-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-telegram-app-https.tls.certresolver=le

      # Enable www redirection for HTTP and HTTPS
#      - traefik.http.routers.${STACK_NAME?Variable not set}-telegram-app-https.middlewares=${STACK_NAME?Variable not set}-www-redirect
#      - traefik.http.routers.${STACK_NAME?Variable not set}-telegram-app-http.middlewares=https-redirect,${STACK_NAME?Variable not set}-www-redirect

volumes:
  app-db-data:
  redis-data:

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: true
